"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9953],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5385:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var a=n(3117),r=(n(7294),n(3905));const o={sidebar_position:3,title:"i18n"},i="i18n and Ransack",s={unversionedId:"going-further/i18n",id:"going-further/i18n",title:"i18n",description:"Ransack translation files are available in",source:"@site/docs/going-further/i18n.md",sourceDirName:"going-further",slug:"/going-further/i18n",permalink:"/ransack/going-further/i18n",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/going-further/i18n.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"i18n"},sidebar:"tutorialSidebar",previous:{title:"CSV Export",permalink:"/ransack/going-further/exporting-to-csv"},next:{title:"Form customisation",permalink:"/ransack/going-further/form-customisation"}},l={},c=[{value:"Working with Globalized Attributes",id:"working-with-globalized-attributes",level:2},{value:"Workaround for Globalized Attributes Sorting",id:"workaround-for-globalized-attributes-sorting",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"i18n-and-ransack"},"i18n and Ransack"),(0,r.kt)("p",null,"Ransack translation files are available in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/tree/main/lib/ransack/locale"},"Ransack::Locale"),". You may also be interested in one of the\nmany translations for Ransack available at\n",(0,r.kt)("a",{parentName:"p",href:"http://www.localeapp.com/projects/2999"},"http://www.localeapp.com/projects/2999"),"."),(0,r.kt)("p",null,"Predicate and attribute translations in forms may be specified as follows (see\nthe translation files in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/tree/main/lib/ransack/locale"},"Ransack::Locale")," for more examples):"),(0,r.kt)("p",null,"locales/en.yml:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"en:\n  ransack:\n    asc: ascending\n    desc: descending\n    predicates:\n      cont: contains\n      not_cont: not contains\n      start: starts with\n      end: ends with\n      gt: greater than\n      lt: less than\n    models:\n      person: Passenger\n    attributes:\n      person:\n        name: Full Name\n      article:\n        title: Article Title\n        body: Main Content\n")),(0,r.kt)("p",null,"Attribute names may also be changed globally, or under ",(0,r.kt)("inlineCode",{parentName:"p"},"activerecord"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"en:\n  attributes:\n    model_name:\n      model_field1: field name1\n      model_field2: field name2\n  activerecord:\n    attributes:\n      namespace/article:\n        title: AR Namespaced Title\n      namespace_article:\n        title: Old Ransack Namespaced Title\n")),(0,r.kt)("h2",{id:"working-with-globalized-attributes"},"Working with Globalized Attributes"),(0,r.kt)("p",null,"If you're using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/globalize/globalize"},"Globalize gem")," for internationalized model attributes, you may encounter issues when sorting on translated attributes of associations while also joining the main model's translations."),(0,r.kt)("p",null,"For example, if you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Book")," model with translated ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Category")," model with translated ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", sorting on the category's translated name while joining the book's translations may not work as expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# This may not work correctly:\nBook.joins(:translations).ransack({ s: ['category_translations_name asc'] }).result\n")),(0,r.kt)("h3",{id:"workaround-for-globalized-attributes-sorting"},"Workaround for Globalized Attributes Sorting"),(0,r.kt)("p",null,"When working with globalized attributes and you need to sort on translated fields of associations, the simplest and most effective approach is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_link")," helper with the translation attribute directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"\x3c!-- This works perfectly for sorting on translated attributes --\x3e\n<%= sort_link @search, :translations_name %>\n<%= sort_link @search, :category_translations_name %>\n")),(0,r.kt)("p",null,"For programmatic sorting, let Ransack handle the joins first:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# Instead of joining translations first, let Ransack handle the joins:\nsearch = Book.ransack({ s: ['category_translations_name asc'] })\nresults = search.result.joins(:translations)\n\n# Or use the includes method to ensure all necessary translations are loaded:\nsearch = Book.ransack({ s: ['category_translations_name asc'] })\nresults = search.result.includes(:translations, category: :translations)\n\n# For more complex scenarios, you can manually specify the joins:\nsearch = Book.ransack({ s: ['category_translations_name asc'] })\nresults = search.result\n  .joins(:translations)\n  .joins(category: :translations)\n")),(0,r.kt)("p",null,"The key is to let Ransack establish the necessary joins for sorting first, then add any additional joins you need for the query."),(0,r.kt)("p",null,"This approach ensures that Ransack properly handles the complex join dependencies between your main model's translations and the associated model's translations."))}p.isMDXComponent=!0}}]);