"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2168],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},677:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=n(3117),r=(n(7294),n(3905));const i={sidebar_position:1,title:"Simple mode"},o="Simple Mode",l={unversionedId:"getting-started/simple-mode",id:"getting-started/simple-mode",title:"Simple mode",description:"Ransack can be used in one of two modes, simple or advanced. For",source:"@site/docs/getting-started/simple-mode.md",sourceDirName:"getting-started",slug:"/getting-started/simple-mode",permalink:"/ransack/getting-started/simple-mode",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/getting-started/simple-mode.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Simple mode"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ransack/"},next:{title:"Advanced Mode",permalink:"/ransack/getting-started/advanced-mode"}},s={},p=[{value:"In your controller",id:"in-your-controller",level:2},{value:"Default search options",id:"default-search-options",level:3},{value:"Search parameter",id:"search-parameter",level:4},{value:"String search",id:"string-search",level:4},{value:"In your view",id:"in-your-view",level:2},{value:"Form helper",id:"form-helper",level:3},{value:"Search link helper",id:"search-link-helper",level:3},{value:"sort_url",id:"sort_url",level:3},{value:"PostgreSQL&#39;s sort option",id:"postgresqls-sort-option",level:3},{value:"Case Insensitive Sorting in PostgreSQL",id:"case-insensitive-sorting-in-postgresql",level:4}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simple-mode"},"Simple Mode"),(0,r.kt)("p",null,"Ransack can be used in one of two modes, simple or advanced. For\nsearching/filtering not requiring complex boolean logic, Ransack's simple\nmode should meet your needs."),(0,r.kt)("h2",{id:"in-your-controller"},"In your controller"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def index\n  @q = Person.ransack(params[:q])\n  @people = @q.result(distinct: true)\nend\n")),(0,r.kt)("p",null,"or without ",(0,r.kt)("inlineCode",{parentName:"p"},"distinct: true"),", for sorting on an associated table's columns (in\nthis example, with preloading each Person's Articles and pagination):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def index\n  @q = Person.ransack(params[:q])\n  @people = @q.result.includes(:articles).page(params[:page])\nend\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"As of v4.0, searching and sorting are not authorized on ",(0,r.kt)("em",{parentName:"p"},"any")," column of your model by default. See ",(0,r.kt)("a",{parentName:"p",href:"/ransack/going-further/other-notes#authorization-allowlistingdenylisting"},"Authorization (allowlisting/denylisting)")," on how to define searchable attributes.\nPrior to v4.0, searching and sorting were authorized on any column of your model by default.")),(0,r.kt)("h3",{id:"default-search-options"},"Default search options"),(0,r.kt)("h4",{id:"search-parameter"},"Search parameter"),(0,r.kt)("p",null,"Ransack uses a default ",(0,r.kt)("inlineCode",{parentName:"p"},":q")," param key for search params. This may be changed by\nsetting the ",(0,r.kt)("inlineCode",{parentName:"p"},"search_key")," option in a Ransack initializer file (typically\n",(0,r.kt)("inlineCode",{parentName:"p"},"config/initializers/ransack.rb"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |c|\n  # Change default search parameter key name.\n  # Default key name is :q\n  c.search_key = :query\nend\n")),(0,r.kt)("h4",{id:"string-search"},"String search"),(0,r.kt)("p",null,"After version 2.4.0 when searching a string query Ransack by default strips all whitespace around the query string.\nThis may be disabled by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"strip_whitespace")," option in a Ransack initializer file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |c|\n  # Change whitespace stripping behavior.\n  # Default is true\n  c.strip_whitespace = false\nend\n")),(0,r.kt)("h2",{id:"in-your-view"},"In your view"),(0,r.kt)("p",null,"The two primary Ransack view helpers are ",(0,r.kt)("inlineCode",{parentName:"p"},"search_form_for")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_link"),",\nwhich are defined in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/blob/main/lib/ransack/helpers/form_helper.rb"},"Ransack::Helpers::FormHelper"),"."),(0,r.kt)("h3",{id:"form-helper"},"Form helper"),(0,r.kt)("p",null,"Ransack's ",(0,r.kt)("inlineCode",{parentName:"p"},"search_form_for")," helper replaces ",(0,r.kt)("inlineCode",{parentName:"p"},"form_for")," for creating the view search form"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= search_form_for @q do |f| %>\n\n  # Search if the name field contains...\n  <%= f.label :name_cont %>\n  <%= f.search_field :name_cont %>\n\n  # Search if an associated articles.title starts with...\n  <%= f.label :articles_title_start %>\n  <%= f.search_field :articles_title_start %>\n\n  # Attributes may be chained. Search multiple attributes for one value...\n  <%= f.label :name_or_description_or_email_or_articles_title_cont %>\n  <%= f.search_field :name_or_description_or_email_or_articles_title_cont %>\n\n  <%= f.submit %>\n<% end %>\n")),(0,r.kt)("p",null,"The argument of ",(0,r.kt)("inlineCode",{parentName:"p"},"f.search_field")," has to be in this form:\n",(0,r.kt)("inlineCode",{parentName:"p"},"attribute_name[_or_attribute_name]..._predicate")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"[_or_another_attribute_name]...")," means any repetition of ",(0,r.kt)("inlineCode",{parentName:"p"},"_or_")," plus the name of the attribute."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cont")," (contains) and ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," (starts with) are just two of the available\nsearch predicates."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"search_form_for")," answer format can be set like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= search_form_for(@q, format: :pdf) do |f| %>\n\n<%= search_form_for(@q, format: :json) do |f| %>\n")),(0,r.kt)("h3",{id:"search-link-helper"},"Search link helper"),(0,r.kt)("p",null,"Ransack's ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_link")," helper creates table headers that are sortable links"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :name) %>\n")),(0,r.kt)("p",null,"Additional options can be passed after the column parameter, like a different\ncolumn title or a default sort order."),(0,r.kt)("p",null,"If the first option after the column parameter is a String, it's considered a\ncustom label for the link:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :name, 'Last Name', default_order: :desc) %>\n")),(0,r.kt)("p",null,"You can use a block if the link markup is hard to fit into the label parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :name) do %>\n  <strong>Player Name</strong>\n<% end %>\n")),(0,r.kt)("p",null,"With a polymorphic association, you may need to specify the name of the link\nexplicitly to avoid an ",(0,r.kt)("inlineCode",{parentName:"p"},"uninitialized constant Model::Xxxable")," error (see issue\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/issues/421"},"#421"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :xxxable_of_Ymodel_type_some_attribute, 'Attribute Name') %>\n")),(0,r.kt)("p",null,"If the first option after the column parameter and/or the label parameter is an\nArray, it will be used for sorting on multiple fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :last_name, [:last_name, 'first_name asc'], 'Last Name') %>\n")),(0,r.kt)("p",null,"In the example above, clicking the link will sort by ",(0,r.kt)("inlineCode",{parentName:"p"},"last_name")," and then\n",(0,r.kt)("inlineCode",{parentName:"p"},"first_name"),". Specifying the sort direction on a field in the array tells\nRansack to ",(0,r.kt)("em",{parentName:"p"},"always")," sort that particular field in the specified direction."),(0,r.kt)("p",null,"Multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"default_order")," fields may also be specified with a trailing options\nHash:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :last_name, %i(last_name first_name),\n  default_order: { last_name: 'asc', first_name: 'desc' }) %>\n")),(0,r.kt)("p",null,"This example toggles the sort directions of both fields, by default\ninitially sorting the ",(0,r.kt)("inlineCode",{parentName:"p"},"last_name")," field by ascending order, and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"first_name")," field by descending order."),(0,r.kt)("p",null,"In the case that you wish to sort by some complex value, such as the result\nof a SQL function, you may do so using scopes. In your model, define scopes\nwhose names line up with the name of the virtual field you wish to sort by,\nas so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class Person < ActiveRecord::Base\n  scope :sort_by_reverse_name_asc, lambda { order("REVERSE(name) ASC") }\n  scope :sort_by_reverse_name_desc, lambda { order("REVERSE(name) DESC") }\n...\n')),(0,r.kt)("p",null,"and you can then sort by this virtual field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :reverse_name) %>\n")),(0,r.kt)("p",null,"The trailing options Hash can also be used for passing additional options to the\ngenerated link, like ",(0,r.kt)("inlineCode",{parentName:"p"},"class:"),"."),(0,r.kt)("p",null,"The sort link order indicator arrows may be globally customized by setting a\n",(0,r.kt)("inlineCode",{parentName:"p"},"custom_arrows")," option in an initializer file like\n",(0,r.kt)("inlineCode",{parentName:"p"},"config/initializers/ransack.rb"),"."),(0,r.kt)("p",null,"You can also enable a ",(0,r.kt)("inlineCode",{parentName:"p"},"default_arrow")," which is displayed on all sortable fields\nwhich are not currently used in the sorting. This is disabled by default so\nnothing will be displayed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |c|\n  c.custom_arrows = {\n    up_arrow: '<i class=\"custom-up-arrow-icon\"></i>',\n    down_arrow: 'U+02193',\n    default_arrow: '<i class=\"default-arrow-icon\"></i>'\n  }\nend\n")),(0,r.kt)("p",null,"All sort links may be displayed without the order indicator\narrows by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"hide_sort_order_indicators")," to true in the initializer file.\nNote that this hides the arrows even if they were customized:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |c|\n  c.hide_sort_order_indicators = true\nend\n")),(0,r.kt)("p",null,"Without setting it globally, individual sort links may be displayed without\nthe order indicator arrow by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"hide_indicator: true")," in the sort link:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_link(@q, :name, hide_indicator: true) %>\n")),(0,r.kt)("h3",{id:"sort_url"},"sort_url"),(0,r.kt)("p",null,"Ransack's ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_url")," helper is like a ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_link")," but returns only the url"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort_url")," has the same API as ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_link"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_url(@q, :name, default_order: :desc) %>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_url(@q, :last_name, [:last_name, 'first_name asc']) %>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erb"},"<%= sort_url(@q, :last_name, %i(last_name first_name),\n  default_order: { last_name: 'asc', first_name: 'desc' }) %>\n")),(0,r.kt)("h3",{id:"postgresqls-sort-option"},"PostgreSQL's sort option"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"NULLS FIRST")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NULLS LAST")," options can be used to determine whether nulls appear before or after non-null values in the sort ordering."),(0,r.kt)("p",null,"You may want to configure it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |c|\n  c.postgres_fields_sort_option = :nulls_first # or :nulls_last\nend\n")),(0,r.kt)("p",null,"To treat nulls as having the lowest or highest value respectively. To force nulls to always be first or last, use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"Ransack.configure do |c|\n  c.postgres_fields_sort_option = :nulls_always_first # or :nulls_always_last\nend\n")),(0,r.kt)("p",null,"See this feature: ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/13/queries-order.html"},"https://www.postgresql.org/docs/13/queries-order.html")),(0,r.kt)("h4",{id:"case-insensitive-sorting-in-postgresql"},"Case Insensitive Sorting in PostgreSQL"),(0,r.kt)("p",null,"In order to request PostgreSQL to do a case insensitive sort for all string columns of a model at once, Ransack can be extended by using this approach:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'module RansackObject\n\n  def self.included(base)\n    base.columns.each do |column|\n      if column.type == :string\n        base.ransacker column.name.to_sym, type: :string do\n          Arel.sql("lower(#{base.table_name}.#{column.name})")\n        end\n      end\n    end\n  end\nend\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class UserWithManyAttributes < ActiveRecord::Base\n  include RansackObject\nend\n")),(0,r.kt)("p",null,"If this approach is taken, it is advisable to ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/13/citext.html"},"add a functional index"),"."),(0,r.kt)("p",null,"This was originally asked in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/activerecord-hackery/ransack/issues/1201"},"a Ransack issue")," and a solution was found on ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/34677378"},"Stack Overflow"),"."))}d.isMDXComponent=!0}}]);