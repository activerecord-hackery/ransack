"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1719],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,l=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),p=c(n),g=o,f=p["".concat(l,".").concat(g)]||p[g]||d[g]||a;return n?r.createElement(f,s(s({ref:e},u),{},{components:n})):r.createElement(f,s({ref:e},u))}));function g(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4713:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return c}});var r=n(3117),o=(n(7294),n(3905));const a={title:"Sorting"},s="Sorting",i={unversionedId:"getting-started/sorting",id:"getting-started/sorting",title:"Sorting",description:"Sorting in the View",source:"@site/docs/getting-started/sorting.md",sourceDirName:"getting-started",slug:"/getting-started/sorting",permalink:"/ransack/getting-started/sorting",draft:!1,editUrl:"https://github.com/activerecord-hackery/ransack/edit/main/docs/docs/getting-started/sorting.md",tags:[],version:"current",frontMatter:{title:"Sorting"},sidebar:"tutorialSidebar",previous:{title:"Search Matchers",permalink:"/ransack/getting-started/search-matches"},next:{title:"Using Predicates",permalink:"/ransack/getting-started/using-predicates"}},l={},c=[{value:"Sorting in the View",id:"sorting-in-the-view",level:2},{value:"Sorting in the Controller",id:"sorting-in-the-controller",level:2},{value:"Sorting on Association Attributes",id:"sorting-on-association-attributes",level:2},{value:"Sorting on Globalized/Translated Attributes",id:"sorting-on-globalizedtranslated-attributes",level:3}],u={toc:c};function d(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sorting"},"Sorting"),(0,o.kt)("h2",{id:"sorting-in-the-view"},"Sorting in the View"),(0,o.kt)("p",null,"You can add a form to capture sorting and filtering options together."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-erb"},'# app/views/posts/index.html.erb\n\n<%= search_form_for @q do |f| %>\n  <%= f.label :title_cont %>\n  <%= f.search_field :title_cont %>\n\n  <%= f.submit "Search" %>\n<% end %>\n\n<table>\n  <thead>\n    <tr>\n      <th><%= sort_link(@q, :title, "Title") %></th>\n      <th><%= sort_link(@q, :category, "Category") %></th>\n      <th><%= sort_link(@q, :created_at, "Created at") %></th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <% @posts.each do |post| %>\n      <tr>\n        <td><%= post.title %></td>\n        <td><%= post.category %></td>\n        <td><%= post.created_at.to_s(:long) %></td>\n      </tr>\n    <% end %>\n  </tbody>\n</table>\n')),(0,o.kt)("h2",{id:"sorting-in-the-controller"},"Sorting in the Controller"),(0,o.kt)("p",null,"To specify a default search sort field + order in the controller ",(0,o.kt)("inlineCode",{parentName:"p"},"index"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# app/controllers/posts_controller.rb\nclass PostsController < ActionController::Base\n  def index\n    @q = Post.ransack(params[:q])\n    @q.sorts = 'title asc' if @q.sorts.empty?\n\n    @posts = @q.result(distinct: true)\n  end\nend\n")),(0,o.kt)("p",null,"Multiple sorts can be set by:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# app/controllers/posts_controller.rb\nclass PostsController < ActionController::Base\n  def index\n    @q = Post.ransack(params[:q])\n    @q.sorts = ['title asc', 'created_at desc'] if @q.sorts.empty?\n\n    @posts = @q.result(distinct: true)\n  end\nend\n")),(0,o.kt)("h2",{id:"sorting-on-association-attributes"},"Sorting on Association Attributes"),(0,o.kt)("p",null,"You can sort on attributes of associated models by using the association name followed by the attribute name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# Sort by the name of the associated category\n@q = Post.ransack(s: 'category_name asc')\n@posts = @q.result\n\n# Sort by attributes of nested associations\n@q = Post.ransack(s: 'category_section_title desc')\n@posts = @q.result\n")),(0,o.kt)("h3",{id:"sorting-on-globalizedtranslated-attributes"},"Sorting on Globalized/Translated Attributes"),(0,o.kt)("p",null,"When working with internationalized models (like those using the Globalize gem), special care is needed when sorting on translated attributes of associations. The simplest approach is to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"sort_link")," helper directly with the translation attribute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-erb"},"\x3c!-- This works perfectly for sorting on translated attributes --\x3e\n<%= sort_link @q, :translations_name %>\n<%= sort_link @q, :category_translations_name %>\n")),(0,o.kt)("p",null,"For programmatic sorting, let Ransack handle the joins first:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# Let Ransack establish the necessary joins for sorting\n@q = Book.ransack(s: 'category_translations_name asc')\n@books = @q.result.joins(:translations)\n\n# For complex scenarios with multiple translations\n@q = Book.ransack(s: 'category_translations_name asc')\n@books = @q.result.includes(:translations, category: :translations)\n")),(0,o.kt)("p",null,"This ensures that Ransack properly handles the join dependencies between your main model's translations and the associated model's translations."))}d.isMDXComponent=!0}}]);